{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","c","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAoB9C,OAEI,aADA,CACA,QAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAE7CN,EAAc,MAMlB,SAGI,uBACIO,KAAK,OACLC,MAAOT,EAEPU,SAzBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGDI,MAAMF,GAHL,cAGbG,EAHa,gBAIIA,EAAIC,OAJR,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAkBZM,GAlBY,4CAAH,sDCCPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAIlC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCJJO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECCf,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAyBtC,OAjBAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IASGqB,EDtB2BK,CAAa1B,GAAjCa,EAJyB,EAI/BN,KAAca,EAJiB,EAIjBA,QAmCtB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,SAAgD,6CAE7D,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACC,cAAC,EAAD,eAGSA,GAFCA,EAAIC,aEnDrCgB,EAAe,WAAM,MAKMzC,mBAAS,CAAC,WALhB,mBAKvB0C,EALuB,KAKX3C,EALW,KAiB9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAIQ2C,EAAWnB,KAAI,SAAAoB,GAAC,OAEZ,aADA,CACC,EAAD,CAEI7B,SAAW6B,GADLA,Y,MC7BlCC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e28d658d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            // console.log('Submit hecho.');\r\n            setCategories( categorias => [inputValue, ...categorias]);\r\n    \r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        // Al utilizar el form tag como agrupador de todos los demás elementos, no necesito utilizar Fragment\r\n        <form onSubmit={ handleSubmit }>\r\n            {/* <h1>{inputValue}</h1> */}\r\n\r\n            <input\r\n                type=\"text\" \r\n                value={inputValue}\r\n                // onChange={ (e) => { console.log(e); } }\r\n                onChange={ handleInputChange }\r\n\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=eRKpUdAF3sqZgI0EWEXx42odjckYG7Bv`;\r\n    const res = await fetch(url);\r\n    const { data } = await res.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    // console.log(gifs);\r\n    // setimages(gifs);\r\n    //Al implementar la función en un archivo externo, se retornan los gifs ya que no tengo acceso a setImages.\r\n    //Al ser una función async, me retorna una promesa que, al resolverse (then), me retorna los gifs\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n\r\n    // console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React/*, { useState, useEffect }*/ from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    // const [counter, setCounter] = useState(0);\r\n    // const [images, setImages] = useState([]);\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n\r\n    //useEffect recibiendo como 2do parámetro un arreglo vacío solo ejecutará el callback una vez (cuando el componente se renderice).\r\n    //Este hook, definido de esta forma, es el equivalente al método componentDidMount() de React basado en clases.\r\n    //Si el arreglo (List) está definido, el callback solo se ejecutará cuando uno de estos valores cambie.\r\n\r\n    // useEffect( () => {\r\n    //     getGifs(category)\r\n    //         // .then( imgs => setImages(imgs));\r\n    //         .then( setImages );\r\n    // }, [category])\r\n\r\n    // const getGifs = async () => {\r\n\r\n    //     const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=eRKpUdAF3sqZgI0EWEXx42odjckYG7Bv`;\r\n    //     const res = await fetch(url);\r\n    //     const { data } = await res.json();\r\n\r\n    //     const gifs = data.map(img => {\r\n    //         return {\r\n    //             id: img.id,\r\n    //             title: img.title,\r\n    //             url: img.images?.downsized_medium.url\r\n    //         }\r\n    //     })\r\n\r\n    //     console.log(gifs);\r\n    //     setImages(gifs);\r\n\r\n\r\n    // }\r\n\r\n    // getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\"><i>Loading...</i></p>}\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                { \r\n                    images.map( img => \r\n                                    <GifGridItem\r\n                                        key={ img.id } \r\n                                        //img={ img } \r\n                                        { ...img }//Envía todas las propiedades del objeto de forma independiente como parámetro al componente\r\n                                    /> )\r\n                }\r\n            </div>\r\n\r\n\r\n                {/* <ol>\r\n                    { images.map( ({ id, title }) => <li key={ id }>{ title }</li> ) }\r\n                </ol> */}\r\n\r\n                {/* <h4>{ counter }</h4> */}\r\n                {/* <button onClick={ () => setCounter(counter + 1) }>Aumentar contador</button> */}\r\n        </>\r\n    )\r\n}\r\n","// Custom Hooks\r\n// Forma de extraer lógica de algún componente o lógica de nuestra aplicación para que sea fácilmente reutilizable\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    //Los efectos esperan algo síncrono, por lo que no pueden ser async\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data: [1, 2, 3, 4, 5, 6, 7],\r\n    //         loading: false\r\n    //     });\r\n    // }, 3000);\r\n\r\n    return state;// {data: [], loading: true};\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // Se debe modificar el estado a través de useState. Para esto puede utilizarse this.state o hook useState\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    \r\n    const [categories, setCategories] = useState(['Naruto']);\r\n\r\n    // const handleAdd = () => {\r\n    //     //Forma #1 de añadir elementos al arreglo\r\n    //     setCategories([...categories, 'HunterXHunter']);\r\n\r\n    //     //Forma #2 de añadir elementos al arreglo\r\n    //     //setCategories (callback de useState) también recibe un callback como parámetro\r\n    //     //este callback recibe como parámetro el state actual\r\n    //     setCategories( categorias => [...categorias, 'Slam Dunk']);//categorias es el state actual pasado como parámetro\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n\r\n            <ol>\r\n                {/* {categories.map(category => <li key={ category }>{ category }</li>)} */}\r\n\r\n                {\r\n                    categories.map(c => \r\n                        // <li key={ c }>{ c }</li>\r\n                        <GifGrid \r\n                            key={ c }\r\n                            category={ c } \r\n                        />\r\n                    )\r\n                }\r\n\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n//con el default export, al momento de importarlo se le puede dar el nombre que yo desee a la importación\r\n\r\n//si no se define un default export y se decide exportar únicamente la función (componente), se utilizará la\r\n//desestructuración de objetos en la importación para obtener la función deseada","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n\n//Dentro de src crear un componente llamado GifExpertApp\n//<h2>GifExpertApp</h2>\n//<hr />\n"],"sourceRoot":""}